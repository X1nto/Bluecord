--- ./discord_94011/src/main/java/com/discord/stores/StoreMessagesHolder.java	2021-12-24 01:10:12.915028200 +0400
+++ ./bluecord/src/main/java/com/discord/stores/StoreMessagesHolder.java	2021-12-24 01:08:33.435262900 +0400
@@ -26,6 +26,9 @@ import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.concurrent.TimeUnit;
+import mods.ThemingTools;
+import mods.anti.AntiDelete;
+import mods.anti.AntiEdit;
 import rx.Observable;
 import rx.Subscription;
 import rx.subjects.BehaviorSubject;
@@ -250,20 +253,26 @@ public class StoreMessagesHolder {
         publishIfUpdated();
     }
 
-    public synchronized void deleteMessages(long j, @Nullable List<Long> list) {
+    /* JADX WARN: Incorrect return type in method signature: (JLjava/util/List<Ljava/lang/Long;>;)V */
+    public synchronized List deleteMessages(long j, @Nullable List list) {
+        List<Message> list2 = null;
         TreeMap<Long, Message> treeMap = this.messages.get(Long.valueOf(j));
         if (isChannelActive(j) && list != null) {
+            list2 = AntiDelete.parseDeletedMessages(treeMap, list, null);
             if (!list.isEmpty()) {
-                for (Long l : list) {
-                    long longValue = l.longValue();
+                Iterator it = list.iterator();
+                while (it.hasNext()) {
+                    long longValue = ((Long) it.next()).longValue();
                     if (treeMap.containsKey(Long.valueOf(longValue))) {
                         treeMap.remove(Long.valueOf(longValue));
                         this.updatedChannels.add(Long.valueOf(j));
                     }
                 }
                 publishIfUpdated();
+                return list2;
             }
         }
+        return list2;
     }
 
     public Observable<Set<Long>> getDetachedChannelsSubject() {
@@ -398,6 +407,7 @@ public class StoreMessagesHolder {
     public synchronized void updateMessages(@NonNull com.discord.api.message.Message message) {
         long g = message.g();
         TreeMap<Long, Message> treeMap = this.messages.get(Long.valueOf(g));
+        AntiEdit.parseEditedMessage(treeMap, message);
         if (isChannelActive(g)) {
             Message message2 = treeMap.get(Long.valueOf(message.o()));
             if (!isChannelDetached(g)) {
@@ -425,7 +435,7 @@ public class StoreMessagesHolder {
                     if (z2) {
                         message = addReaction(message2, b, z3);
                     } else {
-                        message = removeReaction(message2, b, z3);
+                        message = ThemingTools.blockReactionRemove(messageReactionUpdate) ? message2 : removeReaction(message2, b, z3);
                     }
                     treeMap.put(Long.valueOf(c2), message);
                     this.updatedChannels.add(Long.valueOf(a));
